#!/usr/bin/env node

/**
 * Generate consistent hashable JSON payload
 *   great for piping through hash functions.
 *   Works in CLI and importable
 *
 * Use --in-place to overwrite the original JSON file. Default: false
 * Use --sort-object to sort object keys. Default: false
 * Use --priority to specify array sorting
 *   priority (default priority is used
 *   if not specified)
 *
 * Usage:
 *   $0 first.json second.json
 *   cat first.json | $0
 *
 * @author CJ <lim@chernjie.com>
 */

import { readFile, writeFile } from 'fs/promises'
import path from 'path'
import hashable, { getDefaultPriority } from '../src/utils/hashable.js'
import { parseArgs } from '../src/utils/readInput.js'
const STDIN = 'stdin'

useCommandLine(process.argv.slice(2))

async function useCommandLine(argv) {
  const { args, options } = parseArgs(argv)
  if (!args.length && !options.stdin) {
    throw new Error('No input provided')
  }

  const sortObject = options['sort-object'] || false
  const inPlace = options['in-place'] || false
  if (options['sort']) console.error('@deprecated use --priority')
  const priority = (options['priority'] || options['sort'] || '').split(',').concat(getDefaultPriority())
  const sortOptions = { priority, sortObject }

  return (await Promise.allSettled(readInput(args, options)))
    .filter(res => res.status === 'fulfilled')
    .map(res => res.value)
    .map(({ file, content }) => ({
      file,
      content: [
        cntt => JSON.parse(cntt),
        cntt => hashable(cntt, sortOptions),
        cntt => JSON.stringify(cntt, null, 2),
      ].reduce((cntt, fn) => fn(cntt), content)
    }))
    .forEach(({ file, content }) =>
      inPlace && file != STDIN
        ? writeFile(file, content).catch(err => console.error(err, file))
        : process.stdout.write(content)
    )
}

function readInput(args, { stdin }) {
  return args.length
    ? args
      .map(file => path.resolve(process.cwd(), file))
      .map(async file => ({
        file,
        content: await readFile(file).then(res => res.toString()),
      }))
    : [stdin]
      .map(async (stdin) => ({
        file: STDIN,
        content: await stdin
      }))
}